Keane and Wolpin (1994) programs

These are the programs for estimating the occupational choice models 
in the paper by Keane and Wolpin (1994). There is a program that 
generates Monte-Carlo data (dp3asim.f) and a program that estimates 
the model parameters using this Monte-Carlo data (dpml4a.f). 
We generated Monte-Carlo data (see the file “ftest”) 
for 100 people and did estimation on this data, getting the 
results in the file "output1." Before attempting to use these 
programs for any other purpose, or attempting to modify them, 
we suggest you try to replicate this process in order to see 
if the program is working properly for you.  

It is important to note that these programs were written 
circa 1993 to run on a Cray supercomputer with a Unix operating 
system, using a Fortran compiler that supported vectorization. 
The programs would presumably run much quicker on circa 2008 
laptops or desktops. Modifications of the scripts and code will 
be necessary to account for operating system differences. 
We have made no attempt to implement such updates.   

Here is a complete list of all the scripts, Fortran program files, 
input files and output files used in Keane and Wolpin (1994):

Data Generation:

     dp3asim.f   -  program that solves DP problem and creates
                    Monte-Carlo data.
     c3asim.dp   -  script file to compile dp3asim.f (with
                    vectorization).
     brun3asi.dp -  script file to run dp3asim.f.
     in1a        -  input file for dp3asim.f.  This contains the
                    model parameters (it is set up to do model #1
                    in our paper).  in1a also specifies how many
                    draws to use to simulate EMAX when solving the
                    DP problem, and how many people to create data
                    for.  It is currently set to use 5000 draws and
                    to create data for 100 people.  Using 5000
                    draws at all state points to solve the DP
                    problem should give a very accurate solution,
                    although for the "true" solution in our paper
                    we used 100,000 draws.  With draws at 5000, the
                    program dp3asim.f should take about 100 seconds
                    to run on a CRAY. 
     otest       -  this is output from dp3asim.f, and contains the
                    frequency distribution of choices in the Monte-
                    Carlo data.  If you have the program working
                    properly you should be able to replicate this
                    exactly. 
     ftest       -  this contains the Monte-Carlo data that is
                    generated by dp3asim.f and that is used in the
                    estimation.


Estimation:

     dpml4a.f    -  this is the estimation program.  It uses an
                    interpolating regression that generally
                    contains 9 regressors: a constant plus linear
                    and square root terms in the MAXE - EV(j) for
                    j=1,4.  However, in dataset 1, there is no
                    variation across states in the value of home
                    time, and very little variation in the net
                    value of school time.  Hence severe
                    collinearity arises if one tries to use all 9
                    regressors.  Hence, we did not include the
                    linear terms in MAXE - EV3.  This problem does
                    not arise with datasets 2 or 3, so all 9
                    regressors were included when dealing with
                    those datasets.
     cml4a.dp     - script file to compile dpml4a.f.
     brunml4a.dp  - script file to run dpml4a.f.
     in1          - input file for dpml4a.f.  Like in1a above, this
                    contains model parameters.  It also tells how
                    many draws to use to simulate the EMAX, how
                    many state points to simulate EMAX at, and how
                    many draws to use in simulating the 
                    log-likelihood function.  This file differs
                    from in1 in that the number of draws for
                    simulating the EMAX is specified to be 500
                    rather than 5000.  It specifies that EMAX
                    should be simulated at 200 points in the state
                    space, and that 300 draws should be used to
                    simulate the log-likelihood.  It also specifies
                    that one should do 4 iterations starting from
                    the true parameter values.  With these settings
                    the program should take about 250 seconds to
                    run on a CRAY.  Also included on the file are
                    in3, which contains the dataset #2 parameter
                    values, and in3b, which contains the dataset
                    #3 parameter values. 
     seed         - this is an input file to dpml4a.f that contains
                    the starting seed values for the random number
                    generators.
     output1      - this contains the output that one gets by
                    running dpml4a.f on the dataset ftest with the
                    input files in1 and seed.  You should be able
                    to replicate this file exactly if you have the
                    program working properly. 

Note that while the approximation method used here works well 
in the type of occupational choice model used in Keane and Wolpin 
(1994, 1997), the performance of the method may well be problem 
specific.  For this reason, it is important to check if the 
functional form of the interpolating regression works well in 
the problem you are considering, and to do diagnostic checks 
on the interpolating regression. 

We also provide some programs that will help in evaluating the 
out of sample fit of the interpolating regression, in checking 
for collinearity problems, and in evaluating the accuracy of 
the approximate DP solutions.  These are:   
  
Programs for Evaluating Accuracy of Approximate DP Solutions

     dpsim4d.f    - this program solves the DP problem using an
                    interpolating regression that includes the same
                    set of regressors as in dpml4a.f.   It prints
                    out the parameter estimates, standard errors
                    and R-squareds from the interpolating
                    regressions.  You can check for large standard
                    errors to see if there are collinearity
                    problems.  The program also reads in the
                    dataset ftest described above and produces one-
                    step ahead forecasts based on the state
                    variables observed in that dataset.  It also
                    produces unconditional forecasts.  The one step
                    ahead conditional forecasts and unconditional
                    forecasts of the choice distribution are
                    summarized in the output files ocond1 and    
                    ouncond1, respectively.  These should both look
                    similar to the true choice distribution      
                    summarized in the otest file (see above) if the 
                    approximation is working well.  More rigorous
                    fit tests can be done by comparing the raw   
                    data on predicted choices, contained in the  
                    output files fcond1 and funcond1, with the data
                    generated using the "exact" solution, contained
                    in ftest.  
     brunsim4.dp  - script file to run dpsim4d.f.
     dpsim1.f     - this program does the same thing that dpsim4d.f
                    does, except that it simulates the EMAX at all
                    points in the state space rather than using an
                    interpolating regression.  To evaluate the out
                    of sample fit of a particular interpolating
                    regression, you can compare simulated EMAX
                    values from dpsim1.f with interpolated EMAX
                    values from dpsim4d.f.  It is also possible to
                    "shut down" the interpolation code in
                    dpsim4d.f, telling it to simulate EMAX at all
                    state points.  Then you can do this type of out
                    of sample fit test using the dpsim4d.f program
                    alone. 
     brunsim1.dp  - script file to run dpsim1.f.

