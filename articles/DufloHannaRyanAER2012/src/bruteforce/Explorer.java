/*
 * Explorer.java
 *
 * Created on August 18, 2006, 10:00 AM
 */
package bruteforce;

import constants.TeacherConstants;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.text.NumberFormat;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import org.gridgain.grid.Grid;
import org.gridgain.grid.GridException;
import org.gridgain.grid.GridFactory;
import utility.pmUtility;

/**
 *
 * @author Stephen P. Ryan (sryan@mit.edu)
 */
public class Explorer extends javax.swing.JFrame {

    long seed = 777;
    NumberFormat nf = java.text.NumberFormat.getNumberInstance();

    /** Creates new form Explorer */
    public Explorer() {
        setLocation(10, 10);
        initComponents();
        StateSpaceFast space = new StateSpaceFast(TeacherConstants.BETA, TeacherConstants.MU, TeacherConstants.RHO, seed, 27);
        jTableValueFunction.setModel(space);
        ButtonEstimateActionPerformed(null);
    }

    private void disableButtons() {
        ButtonEstimate.setEnabled(false);
        ButtonPlotElasticities.setEnabled(false);
    }

    private void enableButtons() {
        ButtonEstimate.setEnabled(true);
        ButtonPlotElasticities.setEnabled(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableValueFunction = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        ProgressBar = new javax.swing.JProgressBar();
        LabelTime = new javax.swing.JLabel();
        ButtonEstimate = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ButtonPlotElasticities = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Teacher Incentive Estimator");

        jTableValueFunction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableValueFunction);

        org.jdesktop.layout.GroupLayout jPanelTableLayout = new org.jdesktop.layout.GroupLayout(jPanelTable);
        jPanelTable.setLayout(jPanelTableLayout);
        jPanelTableLayout.setHorizontalGroup(
            jPanelTableLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 873, Short.MAX_VALUE)
        );
        jPanelTableLayout.setVerticalGroup(
            jPanelTableLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 271, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Control Panel"));

        LabelTime.setText("t:");

        ButtonEstimate.setText("Estimate Model");
        ButtonEstimate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEstimateActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ButtonPlotElasticities.setText("Plot Elasticities");
        ButtonPlotElasticities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPlotElasticitiesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ButtonEstimate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 172, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(LabelTime, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(ButtonPlotElasticities)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(513, 513, 513))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(ProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(ProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(ButtonEstimate)
                            .add(ButtonPlotElasticities)
                            .add(jButton2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 69, Short.MAX_VALUE)
                        .add(LabelTime)))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelTable, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelTable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonPlotElasticitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPlotElasticitiesActionPerformed
        // want to plot the elasticities over a range of \mu for a guess of the rest of the parameters
        // probably easiest to modify the generateHistoryTask class so that I am not handling all the different models in an ad hoc fashion
        disableButtons();
        SwingWorker worker = new SwingWorker() {

            @Override
            protected void done() {
                super.done();
                enableButtons();
                dispose();
            }

            @Override
            protected Object doInBackground() throws Exception {
                ExecutorService tpes = Executors.newFixedThreadPool(TeacherConstants.NUM_THREADS);
                // ElasticityGenerator elas = new ElasticityGenerator(tpes);
                tpes.shutdown();
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_ButtonPlotElasticitiesActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    public static double[] getGuess() {
        double[] guess = new double[8];

        String model;
        guess = new double[7 + 1];
        double[] variance = new double[7 + 1];
        model = "I";

        if (TeacherConstants.MODEL_IV) {
            model = "IV";
            guess = new double[4 + 1];
        }
        if (TeacherConstants.MODEL_V) {
            model = "V";
            guess = new double[2 + 1];
        }
        if (TeacherConstants.MODEL_VI) {
            model = "VI";
        }
        if (TeacherConstants.MODEL_VII) {
            model = "VII";
            guess = new double[3 + 1];
        }
        if (TeacherConstants.MODEL_VIII) {
            model = "VIII";
            guess = new double[6 + 1];
        }
        if (TeacherConstants.MODEL_IX) {
            model = "IX";
            // beta, mu, rho, and a mu shifter for worked yesterday
            guess = new double[3 + 1];
        }
        if (TeacherConstants.MODEL_X) {
            model = "X";
            // beta, mu, rho, and a mu shifter for worked yesterday
            guess = new double[7 + 1];
        }
        if (TeacherConstants.MODEL_XI) {
            model = "XI";
            // beta, mu, rho, and a mu shifter for worked yesterday + one normal of heterogeneity on mu
            guess = new double[4 + 1];
        }
        if (TeacherConstants.MODEL_XII) {
            model = "XII";
            // beta, mu, rho, and a mu shifter for worked yesterday + one normal of heterogeneity on mu
            guess = new double[3 + 1];
        }
        if (TeacherConstants.MODEL_13) {
            model = "13";
            // beta, mu shared by all; monthly shifter by control group and teacher score
            guess = new double[4 + 1];
        }
        if (TeacherConstants.MODEL_14) {
            model = "14";
            // beta, mu shared by all; monthly shifter by control group and teacher score, yesterday
            guess = new double[5 + 1];
        }
        if (TeacherConstants.MODEL_15) {
            model = "15";
            // beta shared by all; one dimension heterogeneity on mu; monthly shifter by control group and teacher score, yesterday
            guess = new double[6 + 1];
        }
        if (TeacherConstants.MODEL_16) {
            model = "16";
            // beta shared by all; one dimension heterogeneity on mu; monthly shifter by control group and teacher score, yesterday
            guess = new double[9 + 1];
        }
        if (TeacherConstants.MODEL_17) {
            model = "17";
            // block model; beta, mu, rho shared by all
            guess = new double[3 + 1];
        }
        if (TeacherConstants.MODEL_18) {
            model = "18";
            // beta, mu common; last month shifter
            guess = new double[3 + 1];
        }
        if (TeacherConstants.MODEL_19) {
            model = "19";
            // beta, mu common; last month shifter
            guess = new double[5 + 1];
        }
        if (TeacherConstants.MODEL_20) {
            model = "20";
            // beta, mu common; last month shifter
            guess = new double[7 + 1];
        }
        if (TeacherConstants.MODEL_21) {
            model = "21";
            // beta, mu common; last month shifter
            guess = new double[4 + 1];
        }

        String windowAppend = "";
        if (TeacherConstants.USE_WINDOW) {
            windowAppend = "Window" + TeacherConstants.DAYS_WINDOW;
        }

        try {
            System.out.println("Trying to read in data/guess" + model + windowAppend + ".dat");
            ObjectInputStream in = new ObjectInputStream(new FileInputStream("data/guess" + model + windowAppend + ".dat"));
            guess = (double[]) in.readObject();
            variance = (double[]) in.readObject();
            in.close();
            System.out.println("Successfully read in starting values.");
        } catch (Exception e) {
            System.out.println("That failed");
            if (TeacherConstants.USE_WINDOW) {
                System.out.println("\tTrying to use non-window results as a starting value");
                try {
                    ObjectInputStream in = new ObjectInputStream(new FileInputStream("data/guess" + model + ".dat"));
                    guess = (double[]) in.readObject();
                    variance = (double[]) in.readObject();
                    in.close();
                    System.out.println("Successful in using non-window results.");
                } catch (Exception e2) {
                    System.out.println("That didn't work either, going with zero values as starting values.");
                    // e2.printStackTrace();
                }
            }
            // e.printStackTrace();
        }

//        if (TeacherConstants.NORMALIZE_BETA) {
//            double beta = guess[1];
//            for (int i = 2; i < guess.length; i++) {
//                // divide everything by beta
//                guess[i] = guess[i] / beta;
//            }
//            // new first parameter is sigma, which should be 1/beta
//            guess[1] = 1.0 / beta;
//        }

        System.out.print("Parameters loaded: ");
        pmUtility.prettyPrint(new Jama.Matrix(guess, 1));
        // System.out.println("Left point: "+leftPt+" Right point: "+rightPt+" Increment: "+increment);

//        if (guess.length == 4) {
//            guess[1] = 0.0174;
//            guess[2] = -1;
//            guess[3] = 1.005;
//        }

        return guess;
    }

    private void ButtonEstimateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEstimateActionPerformed
        disableButtons();

        SwingWorker worker = new SwingWorker() {

            long t1;
            long t2;
            ExecutorService tpes = null;

            @Override
            protected void done() {
                super.done();
                enableButtons();
                t2 = System.currentTimeMillis();
                LabelTime.setText("t: " + (t2 - t1) / 1000.0 + " s.");
                // System.exit(0);
                // dispose();
                tpes.shutdown();
            }

            @Override
            protected Object doInBackground() throws Exception {
                
                if (TeacherConstants.USE_GRID) {
                    try {
                        GridFactory.start();
                        Grid grid = GridFactory.getGrid();
                        tpes = grid.newGridExecutorService();
                    } catch (GridException ex) {
                        // Logger.getLogger(this.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    tpes = Executors.newFixedThreadPool(TeacherConstants.NUM_THREADS);
                }

                if (TeacherConstants.MODEL_VII || TeacherConstants.MODEL_V || TeacherConstants.MODEL_VI || TeacherConstants.MODEL_17) {
                    // no heterogeneity in these models to integrate over
                    TeacherConstants.NUM_POINTS_HETEROGENEITY_SAMPLE = 1;
                }

                t1 = System.currentTimeMillis();
                double[] guess = getGuess();

                if (TeacherConstants.MODEL_21 || TeacherConstants.MODEL_20 || TeacherConstants.MODEL_19 || TeacherConstants.MODEL_18 || TeacherConstants.MODEL_16 || TeacherConstants.MODEL_15 || TeacherConstants.MODEL_V || TeacherConstants.MODEL_VI || TeacherConstants.MODEL_VIII || TeacherConstants.MODEL_IX || TeacherConstants.MODEL_X || TeacherConstants.MODEL_XI || TeacherConstants.MODEL_XII || TeacherConstants.MODEL_13 || TeacherConstants.MODEL_14) {
                    try {
                        ProbitEstimation probit = new ProbitEstimation(guess, ProgressBar, tpes);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    System.exit(0);
                } else {
                    // call external routine to load data and perform execution
                    // just overwrite BruteForceMC
                    boolean useOptimalWeights = true;
                    BruteForceEstimation brutus = new BruteForceEstimation(ProgressBar, LabelTime, useOptimalWeights, tpes);

                    brutus.setGuess(guess);
                    try {
                        guess = brutus.call();
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.exit(0);
                    }
                }

//                MainOptimalPolicy mop = new MainOptimalPolicy();
//                mop.initializeGUI();
//                mop.execute();

                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_ButtonEstimateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("OS detected: " + System.getProperty("os.name"));
        System.out.println("Number of threads: " + TeacherConstants.NUM_THREADS);

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Explorer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonEstimate;
    private javax.swing.JButton ButtonPlotElasticities;
    private javax.swing.JLabel LabelTime;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableValueFunction;
    // End of variables declaration//GEN-END:variables
}
