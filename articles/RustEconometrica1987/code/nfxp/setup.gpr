"";
"SETUP.GPR: initialization routine for nested fixed point algorithm";
"Version 5, October 2000. By John Rust, Yale University"; "";

format /m1,/rz, 8,8;

declare modnum ?= 0;

if ((files("bdt.dat",0) == 0) and (files("BDT.dat",0) == 0));

    "Error: bdt.dat not found. Running STORDAT.GPR to create it"; "";
    modnum=stordat;

elseif ((rows(modnum) == 1) or (modnum[1] == 0));

     "Error: Discretization parameters set by STORDAT.GPR are not in memory";
     "Load parameters from previous run of STORDAT.GPR? (1=yes, 0=no) ";;
     swj=con(1,1);
     if swj;
       if ((files("n.fmt",0) == 0) and (files("N.fmt",0) == 0));
	   "Error: grid size parameter from STORDAT.GPR not found on disk";
	   "re-running STORDAT.GPR"; "";
           modnum=stordat;

       else;
           load n,p,omax,ogrid,modnum;
       endif;
     else;
       "rerunning STORDAT.GPR to correctly initialize data and parameters"; "";
       modnum=stordat;
     endif;

endif;

/*  INITIALIZE VARIABLES  if program hasn't been previously run */


if (modnum[2] == 0);

    "Parameters of NFXP algorithm were not all previously specified";
    "New values will be initialized and can be changed below";

     initmod=1;
     bet=.9999; dm=2;
     q=11|3; qmax=1000|1000; qtol=.01|.01; qtol1=10|10;
     maxstp=20; modnum[1:4]=2|1|1|0; d=.5;
     t=500; maxls=6; minls=0; ss2=1; itol1=.999; itol2=1e-12;
     ctol=itol2; hpr=1; pr=1; nstep=10; maxlfe=200; 
     mincstp=2; maxcstp=100; ltol=1e-5; stol=1;  drvchk=0;

else;

     initmod=0;
     load bet,dm,q,qmax,qtol,qtol1,maxstp,d,t,maxls,minls,ss2,itol1,itol2;
     load ctol,hpr,pr,nstep,maxlfe,mincstp,maxcstp,ltol,stol,drvchk;

endif;


/*  PRINT OUT EXISTING VARIABLE SETTINGS, and change if desired */ 


"fixed point dimension"$+ftos(n,"*.*lf",6,0);
if modnum[3] == 1;
  "estimating partial likelihood function P(i|x)"; 
else;
  "estimating full likelihood function P(i|x)p(x|x(-1),i(-1))"; 
endif;
"maximum value of [x(t)-x(t-1)] in BDT.DAT data set";; modnum[5];
if modnum[4] == 0; 
  "beta parameter fixed at bet=";; bet; 
else;
  "initial estimate of beta parameter=";; bet;
endif;
if modnum[1] <= 0; modnum[1]=2; endif;

{modnum,nvec,cstr}=display(modnum);

check:

""; "";
"are these the settings you want? (1=yes 0=no)";; swj=con(1,1); "";"";


if swj == 0;

initmod=0;
"enter 1 if you wish to estimate partial likelihood P(i|x)";
"enter 2 if you wish to estimate full likelihood P(i|x)p(x|x(-1),i(-1))";
modnum[3]=con(1,1);
"do you want to estimate discount factor `bet'? (1=yes, 0=no)";;
modnum[4]=con(1,1); if modnum[4] == 0; "";
"beta fixed: enter value 0<bet<1";; bet=con(1,1); endif;

"enter desired number of parameters for cost function c(x): 1,2,3,4:";;
modnum[2]=con(1,1); modnum[1]=0; "";

{modnum,nvec,cstr}=display(modnum);
goto check;

endif;

/* display, change nfxp algorithm settings    */ 

""; "Settings for NFXP algorithm:"; "";

setting:

"Jacobian update factor d, 0<d<1 for fixed point algorithm";
"  d=1 corresponds to Newton-Kantorovich method";
"  d=0 corresponds to Stirling's method        ";
"  d=.5 corresponds to Werner's method         ";
"Jacobian update factor d, 0<d<1           ";; d;
"rows of data set BDT.DAT read per pass    ";; t;
"maximum number of lf evaluations          ";; maxlfe;
"maximum stepsize                          ";; maxstp;
"maximum linesearch iterations             ";; maxls;
"minimum linesearch iterations             ";; minls;
"maximum contraction iterations            ";; maxcstp;
"minimum contraction iterations            ";; mincstp;
"maximum number of NK iterations           ";; nstep;
"switch to step size 1 when grad*direc <   ";; itol2;
"switch to BFGS when grad*direc <          ";; stol;
"lf ratio to terminate line search         ";; itol1;
"initial stepsize                          ";; ss2;
"outer convergence tolerance               ";; ctol;
"inner convergence tolerance               ";; ltol;
"check derivatives of lf? (1=yes, 0=no)    ";; drvchk; 
"print hessian matrix?  (1=yes, 0=no)      ";; hpr;
"print fixed point info? (1=yes, 0=no)     ";; pr;

/* PROMPT USER FOR NEW SETTINGS          */ 

""; "are these settings OK? (1=yes, 0=no)      ";; swj=con(1,1); "";

if swj == 0;

"enter new parameter values";
"Jacobian update factor d, 0<d<1              ";; d=con(1,1);
"rows of data set BDT.DAT read per pass       ";; t=con(1,1);
"maximum number of lf evaluations             ";; maxlfe=con(1,1);
"maximum stepsize                             ";; maxstp=con(1,1);
"maximum linesearch iterations                ";; maxls=con(1,1);
"minimum linesearch iterations                ";; minls=con(1,1);
"maximum contraction iterations               ";; maxcstp=con(1,1);
"minimum contraction iterations               ";; mincstp=con(1,1);
"maximum number of NK iterations              ";; nstep=con(1,1);
"switch to step size 1 if grad*direc <        ";; itol2=con(1,1);
"switch to BFGS when grad*direc <             ";; stol=con(1,1);
"lf ratio to terminate line search            ";; itol1=con(1,1);
"initial stepsize                             ";; ss2=con(1,1);
"outer convergence tolerance                  ";; ctol=con(1,1);
"inner convergence tolerance                  ";; ltol=con(1,1);
"check derivatives of lf? (1=yes, 0=no)       ";; drvchk=con(1,1);
"print hessian matrix?   (1=yes, 0=no)        ";; hpr=con(1,1);
"print fixed point info? (1=yes, 0=no)        ";; pr=con(1,1);
 "";
 goto setting;

endif;

/* DISPLAY AND SELECT INITIAL PARAMETER ESTIMATES   */


if modnum[3] == 2;
   q[(dm-modnum[5]-modnum[7]+1):(dm-modnum[7]),1]=p[1:modnum[5],1]; 
endif;

"enter 1 to input starting values for q or 0 to use current values";;
swj=con(1,1);

redo:

if swj == 1; "";

 "Parameter vector q (enter letter 'l' to leave as is)";

qinpt:
  $nvec'; q';
  "are current values OK? (1=yes,0=no) ";; a1=con(1,1);
  if a1 == 0;
  i=1; do until i > rows(q);
  $nvec[i];;q[i];; a1=cons; "";
  if (a1 $/= "l"); q[i]=stof(a1); endif;
  i=i+1; endo;
  goto qinpt;
  endif;
  "";"";

 "absolute parameter bounds (enter 'l' to leave as is) ";
  qmax=100*ones(rows(q),1);

qmaxinpt:
  $nvec'; qmax';
 "are these values OK? (1=yes,0=no) ";; a1=con(1,1);
  if a1 == 0;
  i=1; do until i > rows(q);
  $nvec[i];;qmax[i];; a1=cons; "";
  if (a1 $/= "l"); qmax[i]=stof(a1); endif;
  i=i+1; endo;
  goto qmaxinpt;
  endif;
  "";"";

 "Set minimum contraction steps if q changes less than ('l' to leave as is)";
  qtol=.1*ones(rows(q),1);

qtolinpt:
  $nvec'; qtol';
  "are these values OK? (1=yes, 0=no) ";; a1=con(1,1);
  if a1 == 0;
  i=1; do until i > rows(q);
  $nvec[i];;qtol[i];; a1=cons; "";
  if (a1 $/= "l"); qtol[i]=stof(a1); endif;
  i=i+1; endo;
  goto qtolinpt;
  endif;
  "";"";

 "Set maximum contraction steps if q changes by more than ('l' to leave as is)";
  qtol1=ones(rows(q),1);

qtl1inpt:
  $nvec'; qtol1';
  "are these values OK? (1=yes, 0=no) ";; a1=con(1,1);
  if a1 == 0;
  i=1; do until i > rows(q);
  $nvec[i];;qtol1[i];; a1=cons; "";
  if (a1 $/= "l"); qtol1[i]=stof(a1); endif;
  i=i+1; endo;
  goto qtl1inpt;
  endif;
  "";"";"";

endif;


   "";"parameter vector q                                "; $nvec'; q';
   "";"absolute parameter bounds for parameter space     "; $nvec'; qmax';
   "";"set cstp=mincstp if all components of q are within"; $nvec'; qtol';
   "";"set cstp=maxcstp if any component of q exceeds    "; $nvec'; qtol1';

if modnum[4] == 0;
      ""; "beta not estimated. Its value is fixed at  :";; bet;
else;
      ""; "beta is estimated. Its initial value is  :";; 
      if modnum[3:4] == 2|1; 
           1/(1+exp(q[dm+1-modnum[5]-modnum[7],1]));
      elseif modnum[3:4] == 1|1;
           1/(1+exp(q[dm-modnum[7],1]));
      endif;
endif; 

""; "are these the values you want? (1=yes, 0=no) ";; swj=con(1,1); "";

if swj == 0; swj=1; goto redo; endif;

     save bet,dm,q,qmax,qtol,qtol1,maxstp,d,t,maxls,minls,ss2,itol1,itol2;
     save ctol,hpr,pr,nstep,maxlfe,mincstp,maxcstp,ltol,stol,modnum,drvchk;

"SETUP complete: ready to run NFXP.GPR"; "";

bye:
